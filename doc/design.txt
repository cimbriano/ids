Computer and Network Security
CIS551 : Spring 2012
Project 2 : Intrusion Detection System
Dustin Zelle (dzelle)
Chris Imbriano (imbriano)

      The main IDS takes two parameters to run.  A rule file conforming to the specified grammar and a jpcap trace file.
The program begins by using the lexer and parser generated by JFLex and CUP to parse the rule file and instantiate
objects defined in our def package.  These objects represent the various levels of abstraction of the rule file. The
whole file is considered to be a ThreatDefinition and internally it has a host to which it applies.  Then it may have 
zero or more rules which may be of type TCPProtocolRule, UDPProtocolRule or TCPStreamRule.
	
	Once the ThreatDefinition and all its subcomponents are instantiated, the IDS class starts a method from the jpcap library
which reads each packet and calls an instance of PacketListener (IDSListener in our case).
	
	As each packet is read, each rule is asked to scan that packet to determine if it matches, or partially matches the contents
of that rule.  In this way, it is not necessary to read all the packets before determining if a subset of the packets in the trace
match any given rule.  Further, each rule is equipped with means to send an alert to standard out as soon as a rule is fully matched.
Because each rule is a separate object, ThreatDefinitions can have multiple rules (as defined by the grammar) and each rule keeps track
of all the packets relevant to it. This way, if one packet participates in many attacks each corresponding rule object will track the
packet individually and will be able to alert for every attack that packet is involved in.
	
	To see this more clearly, we output the colored string of each packet as it is read.  If an alert is triggered, it will 
print to standard out before any other packets are examined.

