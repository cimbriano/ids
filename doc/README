Computer and Network Security
CIS551 : Spring 2012
Project 2 : Intrusion Detection System
Dustin Zelle (dzelle)
Chris Imbriano (imbriano)

Project Directory Organization

cis555-ids
--bin
----def
----ids
----parse
----stream
----out

--doc

--etc
----pcap_files
----rules

--lib
----java_cup
----jflex
----jflex-1.4.3
----jpcap

--src
----def
----ids
----parse
----stream
----test
----out



Usage:

  Run the shell script run.sh from the project root directory.
  
  "./run.sh demo" will run a demonstration of each one of the sample rule files against one of the trace files.
  Each demonstration is piped into <less> so when the demonstration is complete, you can hit 'q'.
  "./run.sh <rulefile> <tracefile>" will run the IDS with the specified rule and trace file, the output
  is piped to <less>.


Description of files included:


package def
 

  ThreatDefinition.java
    Object representing all the attack rules defined in a rule file. The ThreatDefinition has a host name
    for which the rules apply and a RuleList 
    
  RuleList.java
    Wrapper class for an ArrayList of Rule objects
    
  Rule.java
    Object representing a full rule (TCP stream, or protocol).
    It has a name and and instance of an AbstractRule
    
  AbstractRule.java
    Interface for a rule.
    Implementing classes include TCPProtocolRule.java, UDPProtocolRule.java, TCPStreamRule.java
    
  TCPProtocolRule.java
    Object instaiated for TCP protocol rules.
    Has a ProtocolSubruleList and a TCPProtocolRuleChecker, as well as the source and destination port and
    destination ip pertaining to this rule.
    
  ProtocolSubruleList.java
    Wrapper class for an ArrayList of ProtocolSubrule objects.
    
  ProtocolSubrule.java
    Object instaitated for each subrule of a protocol rule.
    Has direction (send | recv), a collection of flags for this rule, and a regex representing the content of the rule
      
  UDPProtocolRule.java
    Object instantiated for each UDP protocol rule
    Has a ProtocolSubruleList and a UDPProtocolRuleChecker, as well as the source and destination port and
    destination ip pertaining to this rule.

  AbstractProtocolRuleChecker.java
    Abstract class providing implementation for common functionality among the RuleCheckers
    The RuleChecker classes are the mechanics needed for scanning a packet against the rules.  It also 
    alerts as soon as possible by sending a message to standard out as soon as a particular packets completes
    a rule match.

  TCPProtocolRuleChecker.java
    Instance of AbstractRuleChecker for TCP protocol rules.

  UDPProtocolRuleChecker.java
    Instance of AbstractRuleChecker for UDP protocol rules.
    
  TCPStreamRule.java
    Implmentation of AbstractRule for TCP stream rules.
    Note: Unlike the ProtocolRule implmentation of AbstractRule, this class also has the mechanics to check packets
    and alert when neccessary.

package stream

  TCPStreamTuple.java
    Object used as a key for a particular TCP stream.
    A key is made of the 4-tuple source address, source port, destination source, destination port.
  
  TCPStream.java
    Object to hold all the packets of a particular stream, ie all those with the same TCPStreamTuple.
    Implments Iterable such that the packets can be examined in correct sequence order (as opposed to
    in the temporal order of receipt)
   
package parse
  
  lexer.java
    Scanner class generated by the JFLex scanner generator
  
  parser.java
  sym.java
    Generated by the CUP parser generator.
   
package ids
  
  IDS.java
    Main class
    Ensures proper arguments are used
    Uses the lexer and parser classes generated by JFlex and CUP to instantiate the ThreatDefinition with
    objects from our def package.
    Call the jpcap method that reads jpcap trace files packet by packet, calling our defined PacketListener
 
  
  IDSListener.class
  	Implements PacketListener and provides an implementation for packetArrived() 
  	Calls on each instantiation of AbstractRule in the ThreatDefinition to scan the packet

  
  
  
  
  
  
  
  
    


  
