package parse;

import java_cup.runtime.*;
import def.*;

/* Code to embed in parser */

parser code {:

    public void report_error(String msg, Object i) {
	StringBuffer m = new StringBuffer("Error");

	if (i instanceof java_cup.runtime.Symbol) {
	    java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) i);

	    if (s.left >= 0) {
		m.append(" in line " + (s.left+1));

		if (s.right >= 0)
		    m.append(", column " + (s.right+1));

		m.append(", symbol " + s.toString());
		m.append(", value " + s.value.toString());
	    }
	}

	m.append(" : " + msg);

	System.err.println(m);
    }

    public void report_fatal_error(String msg, Object i) {
	report_error(msg, i);
	System.exit(1);
    }

    public void check_flags(String flags) {
	for (int x = 0; x < flags.length(); x++)
	    switch (flags.charAt(x)) {
	    case 'S':
	    case 'A':
	    case 'F':
	    case 'R':
	    case 'P':
	    case 'U':
		break;
	    default:
		report_fatal_error("Malformed flags", flags);
	    }
    }
    
:};

/* Grammar terminals */

terminal String STRING; //catches flags as well
terminal String REGEXP;
terminal String IP;

terminal Integer PORT;

/* Grammar keywords */

terminal WITH_FLAGS;
terminal TCP_STREAM;
terminal SET_PROTO;
terminal SET_TYPE;
terminal SET_HOST;
terminal SET_NAME;
terminal PROTOCOL;
terminal SET_SRC;
terminal SET_DST;
terminal SET_IP;
terminal NLINE;
terminal RECV;
terminal SEND;
terminal TCP;
terminal UDP;
terminal ANY;

/* Grammar non terminals */

non terminal ThreatDefinition file;
non terminal RuleList rule_list;
non terminal Rule rule;

non terminal TcpRule tcp_stream_rule;

non terminal ProtocolRule protocol_rule;
non terminal ProtocolSubrule sub_rule;
non terminal ProtocolSubruleList sub_rules;

non terminal String ip, direction, proto, host;
non terminal Integer port;

non terminal nline;

/* Grammar */

file ::= host : ip rule_list : l
         {: RESULT = new ThreatDefinition(ip, l); :};

rule_list ::= rule : r
              {: RESULT = new RuleList(r); :}            
              | rule_list : l rule : r
              {: l.add(r); RESULT = l; :};

host ::= SET_HOST IP : ip NLINE NLINE
         {: RESULT = ip; :};

rule ::= SET_NAME STRING : n NLINE
         tcp_stream_rule : r nline
         {: RESULT = new Rule(n, r); :}
         |
	 SET_NAME STRING : n NLINE
         protocol_rule : r nline
         {: RESULT = new Rule(n, r); :}
         |
         SET_NAME STRING : n NLINE
         tcp_stream_rule : r
         {: RESULT = new Rule(n, r); :}
         |
	 SET_NAME STRING : n NLINE
         protocol_rule : r
         {: RESULT = new Rule(n, r); :};

nline ::= nline NLINE | NLINE;

tcp_stream_rule ::= SET_TYPE TCP_STREAM NLINE
                    SET_SRC port : sp NLINE
                    SET_DST port : dp NLINE
                    SET_IP ip : ip NLINE 
                    direction : d REGEXP : r NLINE
                    {: RESULT = new TcpRule(sp, dp, ip, d.equals("SEND") ? true : false, r); :};

protocol_rule ::= SET_TYPE PROTOCOL NLINE
                  SET_PROTO proto : p NLINE
                  SET_SRC port : sp NLINE
                  SET_DST port : dp NLINE
                  SET_IP ip : ip NLINE
                  sub_rules : l
		  {: RESULT = new ProtocolRule(p.equals("TCP") ? true : false, sp, dp, ip, l); :};

sub_rules ::= sub_rule : r
              {: RESULT = new ProtocolSubruleList(r); :}
              |
	      sub_rules : l sub_rule : r 
	      {: l.add(r); RESULT = l; :};

sub_rule ::= direction : d REGEXP : r NLINE
             {: RESULT = new ProtocolSubrule(d.equals("SEND") ? true : false, r, ""); :}
             |
             direction : d REGEXP : r WITH_FLAGS STRING : f NLINE
             {: parser.check_flags(f);
                RESULT = new ProtocolSubrule(d.equals("SEND") ? true : false, r, f); :}
             |
             direction : d REGEXP : r WITH_FLAGS NLINE
             {: RESULT = new ProtocolSubrule(d.equals("SEND") ? true : false, r, ""); :};

proto ::= TCP
          {: RESULT = new String("TCP"); :}
          |
          UDP
          {: RESULT = new String("UDP"); :};

direction ::= RECV
              {: RESULT = new String("RECV"); :}
              |
	      SEND
              {: RESULT = new String("SEND"); :};

ip ::= IP : ip
       {: RESULT = ip; :}
       |
       ANY
       {: RESULT = new String("*.*.*.*"); :};

port ::= PORT : p
         {: RESULT = p; :}
         |
	 ANY
         {: RESULT = new Integer(0); :};